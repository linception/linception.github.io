<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>汇编语言（第3版）</title>
    <link href="/2021/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89/"/>
    <url>/2021/02/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%EF%BC%88%E7%AC%AC3%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="汇编语言（第3版）"><a href="#汇编语言（第3版）" class="headerlink" title="汇编语言（第3版）"></a>汇编语言（第3版）</h1><h2 id="第1章-基础知识"><a href="#第1章-基础知识" class="headerlink" title="第1章    基础知识"></a>第1章    基础知识</h2><h2 id="第2章-寄存器"><a href="#第2章-寄存器" class="headerlink" title="第2章    寄存器"></a>第2章    寄存器</h2><p>8086CPU 有<strong>14</strong>个寄存器，分别是：<strong>AX、BX、CX、DX、SI、DI、SP、BP、IP、CS、SS、DS、ES、PSW</strong></p><p>通用16位寄存器：<strong>AX、BX、CX、DX</strong>，均可分为 <strong>XH</strong> 和 <strong>XL</strong></p><h3 id="8086CPU-寻址"><a href="#8086CPU-寻址" class="headerlink" title="8086CPU 寻址"></a>8086CPU 寻址</h3><p>8086CPU 是16位结构的 CPU，但是有20位地址总线，所以寻址需要通过：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">物理地址 = 段地址 x 16 + 偏移地址<br></code></pre></td></tr></table></figure><blockquote><p>  【理解】</p><ul><li>  可以将起始地址为16倍数的一组内存单元定义为一个段</li><li>  一个段最大的大小由偏移地址大小决定，及 2^16=64k</li><li>  同一个物理地址可以对应不同的段地址和偏移地址组合</li></ul></blockquote><h3 id="CS-和-IP"><a href="#CS-和-IP" class="headerlink" title="CS 和 IP"></a>CS 和 IP</h3><p>任意时刻，CPU 将 <code>CS:IP</code> 指向的内容当做指令执行</p><p>8086CPU 的简要工作过程：</p><ol><li> 从 <code>CS:IP</code> 指向的内存单元读取指令，读取的指令进入指令缓冲器</li><li> <code>IP=IP+读取的指令长度</code>，指向下一条指令</li><li> 执行指令，转到步骤1，重复</li></ol><p>修改 <code>CS:IP</code> 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp 段地址:偏移地址<br>jmp 合法寄存器 ; 只改变 IP 的值<br></code></pre></td></tr></table></figure><h2 id="实验一"><a href="#实验一" class="headerlink" title="实验一"></a>实验一</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>使用 <a href="https://www.dosbox.com/">DOSBoX</a>，模拟 DOS 环境，可以执行 <code>debug.exe</code> 等</p><p>DOSBox Options 可以配置启动时执行的命令</p><p>为了方便学习，可以将项目根目录挂载到 C 盘，工具添加到环境变量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将项目挂载到C盘根目录</span><br>MOUNT C C:\Users\sharon\workspace\book-assembly-language-3e<br><span class="hljs-comment"># 工具加入到环境变量</span><br>SET PATH=%PATH%;C:\tool<br><span class="hljs-comment"># 切换到C盘</span><br>C:<br></code></pre></td></tr></table></figure><h2 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 指定地址有几种方式</span><br>不指定为当前<br>偏移地址<br>段地址:偏移地址<br>段地址:起始偏移地址 结束偏移地址<br><br>r <span class="hljs-comment"># 查看寄存器内容</span><br>r ax <span class="hljs-comment"># 改变寄存器内容</span><br><br>d 地址 <span class="hljs-comment"># 查看内存中内容</span><br>d <span class="hljs-comment"># 后续的内容</span><br><br>e 地址 <span class="hljs-comment"># 修改内容</span><br>e 地址 内容 <span class="hljs-comment"># 直接修改内容</span><br><br>a 地址 <span class="hljs-comment"># 写入汇编指令</span><br><br>u 地址 <span class="hljs-comment"># 查看对应汇编指令</span><br><br>t <span class="hljs-comment"># 执行指令</span><br></code></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><p><a href="https://github.com/FriendLey/assembly-language-learning">FriendLey/assembly-language-learning</a></p></li><li><p><a href="https://blackdragonf.github.io/all-tags/#%E6%B1%87%E7%BC%96-list">码龙黑曜/汇编</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>汇编</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 对象</title>
    <link href="/2021/02/25/JavaScript/JavaScript%20-%20%E5%8F%8D%E5%B0%84/"/>
    <url>/2021/02/25/JavaScript/JavaScript%20-%20%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<h1 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Reflect</span>.ownKeys() <span class="hljs-comment">// 返回包括Symbol</span><br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 函数</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-函数"><a href="#JavaScript-函数" class="headerlink" title="JavaScript - 函数"></a>JavaScript - 函数</h1><h2 id="bind"><a href="#bind" class="headerlink" title="bind()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"><code>bind()</code></a></h2><p><code>bind()</code> 方法创建一个新的函数，在 <code>bind()</code> 被调用时，这个新函数的 <code>this</code> 被指定为 <code>bind()</code> 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>.bind(thisArg[, arg1[, arg2[, ...]]])<br></code></pre></td></tr></table></figure><p><strong>返回值：</strong></p><p>返回一个原函数的拷贝，并拥有指定的 <strong><code>this</code></strong> 值和初始参数。</p><h2 id="call"><a href="#call" class="headerlink" title="call()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call"><code>call()</code></a></h2><p><code>call()</code> 方法使用一个指定的 <code>this</code> 值和单独给出的一个或多个参数来调用一个函数。</p><blockquote><p><strong>注意：</strong>该方法的语法和作用与 <code>apply()</code> 方法类似，只有一个区别，就是 <code>call()</code> 方法接受的是<strong>一个参数列表</strong>，而 <code>apply()</code> 方法接受的是<strong>一个包含多个参数的数组</strong>。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>.call(thisArg, arg1, arg2, ...)<br></code></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply()"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply"><code>apply()</code></a></h2><p><strong><code>apply()</code></strong> 方法调用一个具有给定<code>this</code>值的函数，以及以一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects">类数组对象</a>）的形式提供的参数。</p><blockquote><p><strong>注意：</strong><code>call()</code> 方法的作用和 <code>apply()</code> 方法类似，区别就是<code>call()</code>方法接受的是<strong>参数列表</strong>，而<code>apply()</code>方法接受的是<strong>一个参数数组</strong>。</p></blockquote><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span>.apply(thisArg, [argsArray])<br></code></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ul><li><code>call()</code> 和 <code>apply()</code> 就传参方式不一样，似乎没有本质区别</li><li><code>bind()</code> 感觉是对 <code>call()</code> 的加强，可以缓存 <code>this</code>，后续再调用</li></ul><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="伪数组转换为数组"><a href="#伪数组转换为数组" class="headerlink" title="伪数组转换为数组"></a>伪数组转换为数组</h3><p>可以通过 <code>Array.prototype.slice.call(likeArray)</code> 将伪数组转换为数组，其中伪数组是：</p><ul><li>能通过下标访问元素 <code>likeArray[i]</code></li><li>有 <code>length</code> 属性</li></ul><p>比如 <code>DOM</code>、<code>arguments</code>、<code>&#123;0: &#39;foo&#39;, length: 1&#125;</code> 等</p><blockquote><p>原理是大致是因为 <code>splice</code> 会新建一个数组，然后遍历 <code>push</code></p></blockquote><h3 id="获取对象类型"><a href="#获取对象类型" class="headerlink" title="获取对象类型"></a>获取对象类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">type</span> (<span class="hljs-params">obj</span>) </span>&#123;<br>   <span class="hljs-keyword">return</span> <span class="hljs-built_in">Object</span>.prototype.toString.call(obj);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="用于继承"><a href="#用于继承" class="headerlink" title="用于继承"></a>用于继承</h3><h2 id="手动实现-call-和-apply"><a href="#手动实现-call-和-apply" class="headerlink" title="手动实现 call() 和 apply()"></a>手动实现 <code>call()</code> 和 <code>apply()</code></h2><p>临时构造一个对象，让 <code>call()</code> 和传入的参数都在里面，这时候调用 <code>call()</code>，<code>this</code> 指针不就指向被调用的参数了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.myCall = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>    <span class="hljs-comment">// 赋值作用域参数，如果没有则默认为 window，即访问全局作用域对象</span><br>    context = context || <span class="hljs-built_in">window</span>    <br>    <span class="hljs-comment">// 绑定调用函数（.call之前的方法即this，前面提到过调用call方法会调用一遍自身，所以这里要存下来）</span><br>    context.invokFn = <span class="hljs-built_in">this</span>    <br>    <span class="hljs-comment">// 截取作用域对象参数后面的参数</span><br>    <span class="hljs-keyword">let</span> args = [...arguments].slice(<span class="hljs-number">1</span>)<br>    <span class="hljs-comment">// 执行调用函数，记录拿取返回值</span><br>    <span class="hljs-keyword">let</span> result = context.invokFn(...args)<br>    <span class="hljs-comment">// 销毁调用函数，以免作用域污染</span><br>    <span class="hljs-built_in">Reflect</span>.deleteProperty(context, <span class="hljs-string">&#x27;invokFn&#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br><br><span class="hljs-built_in">Function</span>.prototype.myApply = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">context</span>) </span>&#123;<br>    <span class="hljs-comment">// 赋值作用域参数，如果没有则默认为 window，即访问全局作用域对象</span><br>    context = context || <span class="hljs-built_in">window</span><br>    <span class="hljs-comment">// 绑定调用函数（.call之前的方法即this，前面提到过调用call方法会调用一遍自身，所以这里要存下来）</span><br>    context.invokFn = <span class="hljs-built_in">this</span><br>    <span class="hljs-comment">// 执行调用函数，需要对是否有参数做判断，记录拿取返回值</span><br>    <span class="hljs-keyword">let</span> result<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">arguments</span>[<span class="hljs-number">1</span>]) &#123;<br>        result = context.invokFn(...arguments[<span class="hljs-number">1</span>])<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        result = context.invokFn()<br>    &#125;<br>    <span class="hljs-comment">// 销毁调用函数，以免作用域污染</span><br>    <span class="hljs-built_in">Reflect</span>.deleteProperty(context, <span class="hljs-string">&#x27;invokFn&#x27;</span>)<br>    <span class="hljs-keyword">return</span> result<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="手动实现-bind"><a href="#手动实现-bind" class="headerlink" title="手动实现 bind()"></a>手动实现 <code>bind()</code></h2><blockquote><p><strong>TODO</strong></p></blockquote><h2 id="体会"><a href="#体会" class="headerlink" title="体会"></a>体会</h2><p><strong>关于面向对象：</strong></p><p><code>this</code> 指针其实是面向对象的概念，比如 Java。把定义的函数和数据圈起来，把这个圈叫类，函数叫方法，数据叫属性，再弄个继承关系，把属性隐藏起来，整个动态函数调用，就叫面向对象了。其中 <code>this</code> 指针就永远指向整个类的实例，不能改变。</p><p>JavaScript 是基于对象的语言，它也是有面向对象的思想在里面，但是没有限制整个圈里的东西，甚至根本没有圈，<code>this</code> 也想指向谁就指向谁，你可以自己画圈去实现面向对象的大部分功能，也可以随时跳出圈外，为所欲为。</p><p><strong>关于实现原理：</strong></p><p>刨根问底式的学习不一定可取和切合实际，但是，虽然我不去看原理，可能没时间、没必要或水平不够，但是不要把这些都看成黑盒，代码都是一行一行敲出来的，即便再底层的东西，它也是实实在在的代码，最多不过0和1，不要求我弄懂所有源码，但是基本的思想还是可以去查一些相关资料了解一下的，了解了基本原理学起来才事半功倍，甚至不学胜有学，因为你无非就是那样去实现的。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference">JavaScript 参考</a></p></li><li><p><a href="https://www.cnblogs.com/Shd-Study/p/6560808.html">javascript中call()、apply()、bind()的用法终于理解</a></p></li><li><p><a href="https://juejin.cn/post/6844903567967387656">让你弄懂 call、apply、bind的应用和区别</a></p></li><li><p><a href="https://www.zhihu.com/question/20289071/answer/93261557">如何理解和熟练运用 JS 中的 call 及 apply？</a></p></li><li><p><a href="https://www.cnblogs.com/zhazhanitian/p/11400898.html">call、apply、bind的原理剖析及实现</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 加载</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E5%8A%A0%E8%BD%BD/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E5%8A%A0%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-加载"><a href="#JavaScript-加载" class="headerlink" title="JavaScript - 加载"></a>JavaScript - 加载</h1><ul><li>  默认同步加载，建议把 <code>&lt;script&gt;</code> 标签放在 <code>&lt;body&gt;</code> 结尾处，这样尽可能减少页面阻塞</li></ul><h2 id="defer-和-async-的区别"><a href="#defer-和-async-的区别" class="headerlink" title="defer 和 async 的区别"></a><code>defer</code> 和 <code>async</code> 的区别</h2><ul><li><code>defer</code> 保证顺序，<code>async</code> 无序</li><li>有 <code>defer</code> 属性的脚本会阻止 <code>DOMContentLoaded</code> 事件，直到脚本被加载并且解析完成</li></ul><p><img src="/2021/02/24/JavaScript/JavaScript%20-%20%E5%8A%A0%E8%BD%BD/20210220233046.png" alt="20210220233046"></p><h2 id="脚本加载"><a href="#脚本加载" class="headerlink" title="脚本加载"></a>脚本加载</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;script&#x27;</span>);<br>script.src = <span class="hljs-string">&#x27;gibberish.js&#x27;</span>;<br>script.async = <span class="hljs-literal">true</span>;<br><span class="hljs-built_in">document</span>.head.appendChild(script);<br></code></pre></td></tr></table></figure><h2 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h2><p>按照先后顺序：</p><ol><li> DOM 数加载完毕 <code>DOMContentLoaded</code></li><li> 加载完图片等资源 <code>window.onload</code></li></ol><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;DOMContentLoaded&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;document.DOMContentLoaded&#x27;</span>)<br>&#125;);<br><br><span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;window.onload&#x27;</span>)<br>&#125;<br><br>$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;$()&quot;</span>)<br>&#125;);<br><br>$(<span class="hljs-built_in">document</span>).ready(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;$(document).ready()&#x27;</span>)<br>&#125;)<br><span class="hljs-comment">// 输出</span><br><span class="hljs-comment">// document.DOMContentLoaded</span><br><span class="hljs-comment">// window.onload</span><br><span class="hljs-comment">// $()</span><br><span class="hljs-comment">// $(document).ready()</span><br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p>  <a href="https://segmentfault.com/q/1010000000640869">defer和async的区别</a></p></li><li><p>  <a href="https://blog.csdn.net/l522703297/article/details/50754695">JS异步加载的三种方式</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 变量与作用域</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E5%8F%98%E9%87%8F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E5%8F%98%E9%87%8F%E4%B8%8E%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-变量与作用域"><a href="#JavaScript-变量与作用域" class="headerlink" title="JavaScript - 变量与作用域"></a>JavaScript - 变量与作用域</h1><h2 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h2><ul><li>  函数作用域</li><li>  变量提升，声明提升到最前面，未声明时使用为 <code>undefined</code></li></ul><h2 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h2><ul><li>  块作用域</li><li>  暂时性死区，未声明时使用报错。区别于 <code>var</code> 的作用域提升</li></ul><h3 id="var-与-let-的区别"><a href="#var-与-let-的区别" class="headerlink" title="var 与 let 的区别"></a><code>var</code> 与 <code>let</code> 的区别</h3><table><thead><tr><th>区别</th><th>var</th><th>let</th></tr></thead><tbody><tr><td>作用域</td><td>函数</td><td>块</td></tr><tr><td>声明前使用</td><td>作用域提升，undefined</td><td>暂时性死区，报错</td></tr><tr><td>重复声明</td><td>覆盖</td><td>报错</td></tr><tr><td>全局作用域声明</td><td>成为 window 属性</td><td>不会成为 window 属性</td></tr></tbody></table><h3 id="for-循环中的-var-与-let"><a href="#for-循环中的-var-与-let" class="headerlink" title="for 循环中的 var 与 let"></a><code>for</code> 循环中的 <code>var</code> 与 <code>let</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 输出：5 5 5 5 5</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 输出：0 1 2 3 4</span><br></code></pre></td></tr></table></figure><blockquote><p><strong>理解：</strong>因为 lambda 表达式会对 <code>let</code> 记录一个当时的值，<code>var</code> 只会记录这个变量</p></blockquote><h2 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h2><ul><li>  和 <code>let</code> 类似，但是不能修改值，可以修改引用内的值</li><li>  引用内的值也不想修改时，用 <code>Object.freeze</code></li></ul><h2 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h2><ol><li> 不使用 <code>var</code></li><li> <code>const</code> 优先，<code>let</code> 次之</li></ol><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><blockquote><p>  【注意】<code>js</code> 的作用域有点乱，不能完全理解，下面说的不准确，甚至不正确，特别是 <code>eval</code></p></blockquote><ul><li>  <code>with</code> 会添加当前对象到作用域链，具有块作用域</li><li>  <code>catch</code> 具有块作用域</li><li>  <code>eval</code> 非严格模式在其所在的作用域，严格模式在其内部作用域</li></ul><blockquote><p>  <code>js</code> 之前只能用 <code>var</code>，没有块作用域，<code>let</code> 出现没他们什么事了</p></blockquote><h2 id="this-指针"><a href="#this-指针" class="headerlink" title="this 指针"></a><code>this</code> 指针</h2><ul><li>  箭头函数的 <code>this</code> 只指向定义它的上下文对象，<code>call</code> 等不能改变</li></ul><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>  <a href="https://github.com/creeperyang/blog/issues/16">深入理解JS中声明提升、作用域（链）和<code>this</code>关键字</a></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 对象</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-对象"><a href="#JavaScript-对象" class="headerlink" title="JavaScript - 对象"></a>JavaScript - 对象</h1><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a><code>Object</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">Object</span>.getOwnPropertyNames() <span class="hljs-comment">// 不返回Symbol</span><br><span class="hljs-built_in">Object</span>.getOwnPropertySymbols() <span class="hljs-comment">// 只返回Symbol</span><br><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptors() <span class="hljs-comment">// 返回所有</span><br></code></pre></td></tr></table></figure><h2 id="Object-prototype"><a href="#Object-prototype" class="headerlink" title="Object.prototype"></a><code>Object.prototype</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title">constructor</span><br><span class="hljs-title">hasOwnProperty</span>(<span class="hljs-params">propertyName</span>)<br><span class="hljs-title">isPrototypeOf</span>(<span class="hljs-params">object</span>)<br><span class="hljs-title">propertyIsEnumerable</span>(<span class="hljs-params">propertyName</span>) // 是否可用<span class="hljs-title">for</span>-<span class="hljs-title">in</span>循环<br><span class="hljs-title">toLocaleString</span>(<span class="hljs-params"></span>)<br><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)<br><span class="hljs-title">valueOf</span>(<span class="hljs-params"></span>)<br></code></pre></td></tr></table></figure><h2 id="new-内部过程"><a href="#new-内部过程" class="headerlink" title="new 内部过程"></a><code>new</code> 内部过程</h2><ol><li>在内存中创建一个新对象</li><li>这个新对象内部的 [[Prototype]] 特性被赋值为构造函数的 prototype 属性</li><li>构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）</li><li>执行构造函数内部的代码（给新对象添加属性）</li><li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象</li></ol><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li>Object.setPrototypeOf() 可以设置原型对象，影响代码性能</li><li>Object.getPrototypeOf()</li><li>Object.create() 创建时指定原型对象</li><li>Object.hasOwnProperty() 是否本身属性，<code>in</code> 包括原型</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>![UfXRZ](JavaScript - 继承/UfXRZ.png)</p><p><a href="https://stackoverflow.com/questions/9959727/proto-vs-prototype-in-javascript">__proto__ VS. prototype in JavaScript</a></p><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 常用对象</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E5%B8%B8%E7%94%A8%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-常用对象"><a href="#JavaScript-常用对象" class="headerlink" title="JavaScript - 常用对象"></a>JavaScript - 常用对象</h1><h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><h3 id="URI-编码"><a href="#URI-编码" class="headerlink" title="URI 编码"></a>URI 编码</h3><ul><li>  <code>encodeURI</code> 不对 URI 关键字符编码</li><li>  <code>encodeURIComponent</code> 对所有字符编码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js">et uri = <span class="hljs-string">&quot;http://www.wrox.com/illegal value.js#start&quot;</span>;<br><span class="hljs-comment">// &quot;http://www.wrox.com/illegal%20value.js#start&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">encodeURI</span>(uri));<br><span class="hljs-comment">// &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.js%23start&quot;</span><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">encodeURIComponent</span>(uri));<br></code></pre></td></tr></table></figure><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h2 id="定型数组"><a href="#定型数组" class="headerlink" title="定型数组"></a>定型数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> buf = <span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayBuffer</span>(<span class="hljs-number">16</span>); <span class="hljs-comment">// 初始化为0</span><br><span class="hljs-keyword">const</span> v = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DataView</span>(buf);<br><span class="hljs-keyword">const</span> ints = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Int32Array</span>(buf)<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 数据类型</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript - 数据类型"></a>JavaScript - 数据类型</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>有 7 种简单类型（也称原始类型）：</p><ul><li><code>Undefined</code>：只有一个值 <code>undefined</code></li><li><code>Null</code>：只有一个值 <code>null</code></li><li><code>Boolean</code>：只有 <code>true</code> 和 <code>false</code></li><li><code>Number</code></li><li><code>String</code></li><li><code>Symbol</code></li><li><code>BigInt</code></li></ul><p>1 种复杂数据类型：</p><ul><li><code>Object</code></li></ul><h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a><code>typeof</code> 操作符</h2><ul><li>  除了 <code>null</code>，返回对应小写开头的数据类型</li><li><code>null</code> 认为是空对象，所以 <code>typeof(null)</code> 返回 <code>object</code></li><li>  函数严格来讲是 <code>Object</code>，但是会返回 <code>function</code></li><li><code>typeof</code> <strong>未赋值</strong>和<strong>未声明</strong>的变量都返回 <code>undefined</code></li></ul><h2 id="instanceof-操作符"><a href="#instanceof-操作符" class="headerlink" title="instanceof 操作符"></a><code>instanceof</code> 操作符</h2><ul><li>  对象类型需要使用 <code>instanceof</code> 确定是否是某个类型</li></ul><h2 id="undefined-和-null-类型"><a href="#undefined-和-null-类型" class="headerlink" title="undefined 和 null 类型"></a><code>undefined</code> 和 <code>null</code> 类型</h2><p><code>undefined</code> 是 <code>null</code> 派生来的，所以</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-literal">undefined</span> == <span class="hljs-literal">null</span> <span class="hljs-comment">// true</span><br><span class="hljs-literal">undefined</span> === <span class="hljs-literal">null</span> <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><h2 id="Boolean-类型"><a href="#Boolean-类型" class="headerlink" title="Boolean 类型"></a><code>Boolean</code> 类型</h2><h3 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h3><table><thead><tr><th>数据类型</th><th>转换为 <code>true</code></th><th>转换为 <code>false</code></th></tr></thead><tbody><tr><td><code>String</code></td><td>非空</td><td><code>&quot;&quot;</code> 空字符串</td></tr><tr><td><code>Number</code></td><td>非零（包括无穷）</td><td><code>±0</code>、<code>NaN</code></td></tr><tr><td><code>Object</code></td><td>非 <code>null</code></td><td><code>null</code></td></tr><tr><td><code>Undefined</code></td><td>-</td><td><code>undefined</code></td></tr></tbody></table><h2 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a><code>Number</code> 类型</h2><h3 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h3><ul><li>  <code>+0</code>、<code>-0</code></li><li>  <code>+Infinity</code>、<code>-Infinity</code></li><li>  <code>NaN</code></li></ul><h3 id="转换规则-1"><a href="#转换规则-1" class="headerlink" title="转换规则"></a>转换规则</h3><ul><li>  布尔值，<code>true</code> 为 1，<code>false</code> 为 0</li><li>  <code>null</code> 为 0</li><li>  <code>undefined</code> 为 <code>NaN</code></li><li>字符串<ul><li>  空字符串返回 0</li><li>  数值 <code>0x</code> 开头十六进制，否则十进制</li><li>  包含其他字符 <code>NaN</code></li></ul></li><li>  对象调用 <code>valueOf</code>，再转换</li></ul><blockquote><p>  <code>Number</code> 只能包含数字，<code>parseInt</code> 数字开头就行</p></blockquote><h2 id="String-类型"><a href="#String-类型" class="headerlink" title="String 类型"></a><code>String</code> 类型</h2><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">`<span class="hljs-subst">$&#123;表达式&#125;</span>`</span><br></code></pre></td></tr></table></figure><h3 id="标签函数"><a href="#标签函数" class="headerlink" title="标签函数"></a>标签函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模板字符串前加上标签函数名</span><br><span class="hljs-keyword">let</span> ret = tagFun<span class="hljs-string">`<span class="hljs-subst">$&#123;a&#125;</span> + <span class="hljs-subst">$&#123;b&#125;</span> = <span class="hljs-subst">$&#123;a + b&#125;</span>`</span><br><span class="hljs-comment">// 调用时会把间隔的字符串和变量值传入</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tagFun</span>(<span class="hljs-params">strings, ...expressions</span>) </span>&#123;<br>  <span class="hljs-comment">// strings 为 $&#123;&#125; 分割的字符串数组</span><br>  <span class="hljs-comment">// expressions 为 $&#123;&#125; 中的每个表达式的值</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>用标签函数实现默认字符串拼接功能：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">noTag</span>(<span class="hljs-params">strings, ...expressions</span>) </span>&#123; <br>  <span class="hljs-keyword">return</span> strings[<span class="hljs-number">0</span>] + expressions.map(<span class="hljs-function">(<span class="hljs-params">e, i</span>) =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;e&#125;</span><span class="hljs-subst">$&#123;strings[i + <span class="hljs-number">1</span>]&#125;</span>`</span>).join(<span class="hljs-string">&#x27;&#x27;</span>); <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;\u00A9&#x27;</span>)<br><span class="hljs-comment">// 输出 ©</span><br><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">String</span>.raw<span class="hljs-string">`\u00A9`</span>)<br><span class="hljs-comment">// 输出 \u00A9</span><br></code></pre></td></tr></table></figure><blockquote><p>  注意：调用时没用括号</p></blockquote><h2 id="Symbol-类型"><a href="#Symbol-类型" class="headerlink" title="Symbol 类型"></a>Symbol 类型</h2><h3 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 新建，每个都不一样</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>()<br><span class="hljs-keyword">let</span> s1 = <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;desc&#x27;</span>) <span class="hljs-comment">// 只做为描述</span><br></code></pre></td></tr></table></figure><blockquote><p>  不能 <code>new Symbol()</code>，避免创造包装对象，<code>BigInt</code> 也不能 <code>new</code>。不用 <code>new</code> 时，返回的是基本类型，用 <code>new</code> 返回的是包装类型，比如：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">typeof</span>(<span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">// number</span><br><span class="hljs-keyword">typeof</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>)) <span class="hljs-comment">// object</span><br></code></pre></td></tr></table></figure><p>  可以用 <code>Object(Symbol())</code> 包装</p></blockquote><p><strong>参考：</strong></p><ul><li>  <a href="http://www.zuo11.com/blog/2019/12/new_check.html">Symbol、BigInt不能new，而String、Number可以new，为什么？</a></li></ul><h3 id="全局符号"><a href="#全局符号" class="headerlink" title="全局符号"></a>全局符号</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">&#x27;key&#x27;</span>) <span class="hljs-comment">// 作为键，相同的key返回同一个</span><br><span class="hljs-keyword">let</span> key = <span class="hljs-built_in">Symbol</span>.keyFor(s) <span class="hljs-comment">// 获取key </span><br></code></pre></td></tr></table></figure><h3 id="作为属性"><a href="#作为属性" class="headerlink" title="作为属性"></a>作为属性</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">o = &#123;[fooSymbol]: <span class="hljs-string">&#x27;&#x27;</span>&#125; <span class="hljs-comment">// 加中括号，否则认为是string</span><br>o[fooSymbol] = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-built_in">Object</span>.getOwnPropertyNames() <span class="hljs-comment">// 不返回Symbol</span><br><span class="hljs-built_in">Object</span>.getOwnPropertySymbols() <span class="hljs-comment">// 只返回Symbol</span><br><span class="hljs-built_in">Object</span>.getOwnPropertyDescriptors() <span class="hljs-comment">// 返回所有</span><br><span class="hljs-built_in">Reflect</span>.ownKeys() <span class="hljs-comment">// 返回所有</span><br></code></pre></td></tr></table></figure><h3 id="内置符号"><a href="#内置符号" class="headerlink" title="内置符号"></a>内置符号</h3><ul><li>  Symbol.asyncIterator</li><li>  Symbol.hasInstance</li><li>  Symbol.isConcatSpreadable</li><li>  Symbol.iterator</li><li>  Symbol.match</li><li>  Symbol.replace</li><li>  Symbol.search</li><li>  Symbol.species</li><li>  Symbol.split</li><li>  Symbol.toPrimitive</li><li>  Symbol.toStringTag</li><li>  Symbol.unscopables</li></ul><h2 id="BigInt-类型"><a href="#BigInt-类型" class="headerlink" title="BigInt 类型"></a>BigInt 类型</h2><ul><li>  字面值可加 <code>n</code> 后缀表示：10n</li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript - 运算符</title>
    <link href="/2021/02/24/JavaScript/JavaScript%20-%20%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2021/02/24/JavaScript/JavaScript%20-%20%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript-运算符"><a href="#JavaScript-运算符" class="headerlink" title="JavaScript - 运算符"></a>JavaScript - 运算符</h1><h2 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h2><ul><li>  <code>&gt;&gt;</code> 有符号右移</li><li>  <code>&gt;&gt;&gt;</code> 无符号右移</li></ul><h2 id="没有整除"><a href="#没有整除" class="headerlink" title="没有整除"></a>没有整除</h2><ul><li>  <code>Math.floor()</code></li></ul><h2 id="指数"><a href="#指数" class="headerlink" title="指数"></a>指数</h2><ul><li>  <code>**</code></li></ul><h2 id="相等和全等"><a href="#相等和全等" class="headerlink" title="相等和全等"></a>相等和全等</h2><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ul><li><p>  如果任一操作数是布尔值，则将其转换为数值再比较是否相等。<code>false</code> 转换为 0，<code>true</code> 转换为 1</p></li><li><p>  如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等</p></li><li><p>如果一个操作数是对象，另一个操作数不是，则调用对象的 <code>valueOf()</code> 方法取得其原始值，再根据前面的规则进行比较</p></li></ul><blockquote><p>  <code>null == undefined</code></p><p>  <code>null !=== undefined</code></p></blockquote><h2 id="for-in-和-for-of"><a href="#for-in-和-for-of" class="headerlink" title="for-in 和 for-of"></a><code>for-in</code> 和 <code>for-of</code></h2><ul><li>  <code>for-in</code> 遍历键名</li><li>  <code>for-of</code> 遍历键值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> [idx, element] <span class="hljs-keyword">of</span> array)<br></code></pre></td></tr></table></figure><h2 id="with"><a href="#with" class="headerlink" title="with"></a><code>with</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">with</span> (location) &#123;<br>  <span class="hljs-comment">// location加入到作用域上下文中</span><br>&#125;<br></code></pre></td></tr></table></figure><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL 知识点</title>
    <link href="/2021/02/24/MySQL/MySQL%20%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2021/02/24/MySQL/MySQL%20%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="MySQL-知识点"><a href="#MySQL-知识点" class="headerlink" title="MySQL 知识点"></a>MySQL 知识点</h1><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a><code>DISTINCT</code></h2><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT select_list<br></code></pre></td></tr></table></figure><ul><li>  <code>NULL</code> 合成一个</li><li>  多个字段只要有一个不同就认为不同</li><li>  可以认为是简单的 <code>GROUP BY</code>，区别是后者会排序</li><li>  可用于聚合函数，比如 <code>COUNT(DISTINCT colume)</code></li><li>  有 <code>LIMIT</code> 时，<code>DISTINCT</code> 先执行</li></ul><blockquote><p>  MySQL 8 中 <code>GROUP BY</code> 默认不会排序了</p></blockquote><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.mysqltutorial.org/">MySQL Tutorial</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2021/02/23/JavaScript/JavaScript/"/>
    <url>/2021/02/23/JavaScript/JavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="JavaScript-知识体系"><a href="#JavaScript-知识体系" class="headerlink" title="JavaScript 知识体系"></a>JavaScript 知识体系</h2><div class="markmap-container" style="height:undefined;" ><svg class="markmap-svg">{"t":"root","d":0,"v":"","c":[{"t":"list_item","d":1,"v":"JS 的加载"},{"t":"list_item","d":1,"v":"变量","c":[{"t":"list_item","d":2,"v":"声明"},{"t":"list_item","d":2,"v":"作用域"},{"t":"list_item","d":2,"v":"垃圾回收"}]},{"t":"list_item","d":1,"v":"运算符"},{"t":"list_item","d":1,"v":"语句"},{"t":"list_item","d":1,"v":"数据类型","c":[{"t":"list_item","d":2,"v":"基本类型"},{"t":"list_item","d":2,"v":"Object 类型"}]},{"t":"list_item","d":1,"v":"函数"},{"t":"list_item","d":1,"v":"对象","c":[{"t":"list_item","d":2,"v":"继承"}]},{"t":"list_item","d":1,"v":"内置对象","c":[{"t":"list_item","d":2,"v":"数据结构","c":[{"t":"list_item","d":3,"v":"Array"},{"t":"list_item","d":3,"v":"Map"},{"t":"list_item","d":3,"v":"Set"}]},{"t":"list_item","d":2,"v":"日期"},{"t":"list_item","d":2,"v":"数学"},{"t":"list_item","d":2,"v":"正则"}]},{"t":"list_item","d":1,"v":"迭代器"},{"t":"list_item","d":1,"v":"代理"},{"t":"list_item","d":1,"v":"反射"},{"t":"list_item","d":1,"v":"异步","c":[{"t":"list_item","d":2,"v":"Promise"},{"t":"list_item","d":2,"v":"生成器"},{"t":"list_item","d":2,"v":"async"}]},{"t":"list_item","d":1,"v":"类"},{"t":"list_item","d":1,"v":"模块"},{"t":"list_item","d":1,"v":"装饰器"}]}</svg></div><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>《JavaScript 高级程序设计（第4版）》<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="《JavaScript 高级程序设计（第4版）》源码地址">[1]</span></a></sup></li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.ituring.com.cn/book/2472">《JavaScript 高级程序设计（第4版）》源码地址</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AJAX</title>
    <link href="/2021/02/16/JavaScript/AJAX/"/>
    <url>/2021/02/16/JavaScript/AJAX/</url>
    
    <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h1><p>AJAX 是异步的 JavaScript 和 XML（<strong>A</strong>synchronous <strong>J</strong>avaScript <strong>A</strong>nd <strong>X</strong>ML）。简单点说，就是使用 <code>XMLHttpRequest</code> 对象与服务器通信。</p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Old compatibility code, no longer needed.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.XMLHttpRequest) &#123; <span class="hljs-comment">// Mozilla, Safari, IE7+ ...</span><br>    httpRequest = <span class="hljs-keyword">new</span> XMLHttpRequest();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">window</span>.ActiveXObject) &#123; <span class="hljs-comment">// IE 6 and older</span><br>    httpRequest = <span class="hljs-keyword">new</span> ActiveXObject(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://developer.mozilla.org/zh-cn/docs/web/api/xmlhttprequest">XMLHttpRequest</a></p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX/Getting_Started#%E4%BB%80%E4%B9%88%E6%98%AFajax%EF%BC%9F">什么是AJAX？</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AJAX</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数值在计算机中的表示</title>
    <link href="/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
    <url>/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数值在计算机中的表示"><a href="#数值在计算机中的表示" class="headerlink" title="数值在计算机中的表示"></a>数值在计算机中的表示</h1><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><p><strong>原码</strong>：最高位是符号位，0为正，1为负，其余为该二进制的绝对值</p><p><strong>反码</strong>：原码符号位不变，其余按位取反</p><p><strong>补码</strong>：两种计算方式</p><ol><li>反码+1</li><li>右边第一个1及其右边的0不变，左边按位取反</li></ol><blockquote><p>计算机中都是存的补码，上面只是补码的计算方式，不是定义</p></blockquote><h3 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h3><p>补码的出现，就是为了把减法变成加法。怎么变呢，我们以钟表为例，一圈刻度是0到11。如果要从10点回拨到8点：</p><ol><li>一种方式是直接-2</li><li>另一个方式是+10</li></ol><p>10怎么来的？10其实也是回拨2，只不过是在多一圈的基础上-2，即10=12-2，这里的10就类似于2的补码。</p><p>计算机中的补码根本原因就是因为n位二进制溢出循环机制类似于钟表循环：</p><ul><li>减一个数m等于加上-m+2^(n+1)的正数</li><li>反过来，加一个数m等于加一个m-2^(n+1)的负数</li></ul><p>根据下图，加左边的数就等于减去对应的补码</p><p><img src="/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/image-20210213021329311.png" alt="image-20210213021329311"></p><blockquote><p>总结来说，补码就是2^(n+1)-m</p><ul><li>加上你的补码就是减去你</li><li>虽然和你背靠背，那我绕地球一圈就是和你面对面</li></ul></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.imooc.com/article/16813?block_id=tuijian_wz">原码，反码，补码杂谈</a></li></ul><h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><p>IEEE（Institute of Electrical and Electronics Engineers，电气与电子工程师协会）标准浮点数表示：<code>V=(-1)^s * M * 2^E</code></p><ul><li>S：符号（Sign），0 正，1 负</li><li>E：阶码（Exponent），2 的 E 次幂，可能是负数</li><li>M：尾数（Mantissa），二进制小数，[1,2) 或 [0,1)</li></ul><p>单精度浮点数：</p><p><img src="/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20210214002202.png" alt="20210214002202"></p><p>双精度浮点数：</p><p><img src="/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/20210214002210.png" alt="20210214002210"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>根据阶码和尾数的不同，可以分为几类：</p><p><img src="/2021/02/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E5%80%BC%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%AD%E7%9A%84%E8%A1%A8%E7%A4%BA/image-20210214002715305.png" alt="image-20210214002715305"></p><ul><li><p>规格化的值：e 不全为0和1，E=e-Bias，M=m+1</p><blockquote><p>k 位阶码，偏置（Bias）为 2^(k-1)-1</p><ul><li>单精度 k 为8，偏置为127</li><li>双精度 k 为 11，偏置为1023</li></ul></blockquote></li><li><p>非规格化的值：e 全为0，E=1-Bias，M=m</p><blockquote><p><strong>为什么非规格化 E=1-Bias，而不是 -Bias</strong>：因为和规则化的值平滑衔接</p><p><strong>为什么需要非规则化的值</strong>：</p><ul><li>因为规格化整数位始终是1，即 M&gt;=1，不能表示0。阶码和尾数全为0，分正负</li><li>表示非常接近0的数</li></ul></blockquote></li><li><p>无穷：e 全为1，m 全为0，分正负</p></li><li><p>NaN：e 全为1，m 不为0，是一系列值</p></li></ul><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://blog.csdn.net/tercel_zhang/article/details/52537726">程序员必知之浮点数运算原理详解</a></p></li><li><p><a href="http://c.biancheng.net/view/314.html">IEEE 754浮点数标准详解</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/107106675">IEEE浮点表示</a></p></li><li><p>《深入理解计算机系统（第3版）》</p></li><li><p>《计算机科学导论（第3版）》</p></li><li><p><a href="http://www.binaryconvert.com/result_float.html">浮点在线数转二进制</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>计算机基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 方式安装 Elasticsearch</title>
    <link href="/2021/02/11/Elasticsearch/Docker%20%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%20Elasticsearch/"/>
    <url>/2021/02/11/Elasticsearch/Docker%20%E6%96%B9%E5%BC%8F%E5%AE%89%E8%A3%85%20Elasticsearch/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-方式安装-Elasticsearch"><a href="#Docker-方式安装-Elasticsearch" class="headerlink" title="Docker 方式安装 Elasticsearch"></a>Docker 方式安装 Elasticsearch</h1><p>版本兼容：<a href="https://www.elastic.co/cn/support/matrix#matrix_compatibility">https://www.elastic.co/cn/support/matrix#matrix_compatibility</a></p><h2 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull elasticsearch:7.6.2<br>docker run -d --name es -p 9200:9200 -p 9300:9300 -e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> elasticsearch:7.6.2<br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9200/">http://localhost:9200</a></p><h3 id="允许跨域"><a href="#允许跨域" class="headerlink" title="允许跨域"></a>允许跨域</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">docker</span> <span class="hljs-string">exec</span> <span class="hljs-string">-it</span> <span class="hljs-string">es</span> <span class="hljs-string">/bin/bash</span><br><span class="hljs-string">cd</span> <span class="hljs-string">config</span><br><span class="hljs-string">vi</span> <span class="hljs-string">elasticsearch.yml</span><br><br><span class="hljs-comment"># 配置</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><br><span class="hljs-comment"># 重启</span><br><span class="hljs-string">docker</span> <span class="hljs-string">restart</span> <span class="hljs-string">es</span><br></code></pre></td></tr></table></figure><h2 id="安装-Elasticsearch-Head"><a href="#安装-Elasticsearch-Head" class="headerlink" title="安装 Elasticsearch Head"></a>安装 Elasticsearch Head</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull mobzelasticsearch-head:5<br>docker run -d --name es-head -p 9100:9100 docker.io/mobz/elasticsearch-head:5<br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:9100/">http://localhost:9100</a></p><blockquote><p>需要允许 Elasticsearch 跨域</p></blockquote><h3 id="406-错误"><a href="#406-错误" class="headerlink" title="406 错误"></a>406 错误</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it es-head /bin/bash<br><span class="hljs-comment"># 没有vi，拷贝出来改</span><br>docker cp es-head:/usr/src/app/_site/vendor.js /tmp/vendor.js<br>vi /tmp/vendor.js<br><span class="hljs-comment"># x-www-form-urlencoded 替换为 json;charset=UTF-8</span><br>:s/x-www-form-urlencoded/json;charset=UTF-8/g<br><span class="hljs-comment"># 拷贝回去</span><br>docker cp /tmp/vendor.js es-head:/usr/src/app/_site/vendor.js<br><span class="hljs-comment"># 重启</span><br>docker restart es-head<br></code></pre></td></tr></table></figure><h2 id="安装-Kibana"><a href="#安装-Kibana" class="headerlink" title="安装 Kibana"></a>安装 Kibana</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull kibana:7.6.2<br>docker run -d --name kibana --link es:elasticsearch -p 5601:5601 kibana:7.6.2<br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:5601/">http://localhost:5601</a></p><h3 id="配置中文"><a href="#配置中文" class="headerlink" title="配置中文"></a>配置中文</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it kibana /bin/bash<br><span class="hljs-built_in">cd</span> config<br>vi kibana.yml<br><br><span class="hljs-comment"># 增加</span><br>i18n.locale: <span class="hljs-string">&quot;zh-CN&quot;</span><br><br><span class="hljs-comment"># 重启</span><br>docker restart kibana<br></code></pre></td></tr></table></figure><h2 id="安装-IK-分词器"><a href="#安装-IK-分词器" class="headerlink" title="安装 IK 分词器"></a>安装 IK 分词器</h2><p>github 地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik">https://github.com/medcl/elasticsearch-analysis-ik</a></p><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it es /bin/bash<br><span class="hljs-built_in">cd</span> plugins<br>elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip<br>docker restart es<br></code></pre></td></tr></table></figure><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> plugins &amp;&amp; mkdir ik &amp;&amp; <span class="hljs-built_in">cd</span> ik<br>curl -LJO https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip<br><span class="hljs-comment"># 加速 curl -LJO https://hub.fastgit.org/medcl/elasticsearch-analysis-ik/releases/download/v7.6.2/elasticsearch-analysis-ik-7.6.2.zip</span><br>unzip elasticsearch-analysis-ik-7.6.2.zip<br></code></pre></td></tr></table></figure><h3 id="添加字典"><a href="#添加字典" class="headerlink" title="添加字典"></a>添加字典</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#docker exec -it -e LANG=C.UTF-8 es /bin/bash</span><br>docker <span class="hljs-built_in">exec</span> -it es /bin/bash<br><span class="hljs-comment"># elasticsearch-plugin 方式安装配置文件在</span><br><span class="hljs-built_in">cd</span> config/analysis-ik<br><span class="hljs-comment"># 手动解压配置文件在</span><br><span class="hljs-built_in">cd</span> plugins/ik/config<br><span class="hljs-comment"># 中文乱码不管，也可以添加成功</span><br>vi my.dic<br>vi IKAnalyzer.cfg.xml<br><span class="hljs-comment"># 添加</span><br>&lt;entry key=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;my.dic&lt;/entry&gt;<br>docker restart es<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _analyze<br>&#123;<br>  <span class="hljs-attr">&quot;analyzer&quot;</span>: <span class="hljs-string">&quot;ik_smart&quot;</span>,<br>  <span class="hljs-attr">&quot;text&quot;</span>: <span class="hljs-string">&quot;黎小荣&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>分词方式：有 <code>ik_smart</code> 和 <code>ik_max_word</code> 两种</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/adawoo/p/12455265.html">docker安装elasticsearch和kibana</a></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>搜索引擎</category>
      
      <category>Elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Elasticsearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 的使用</title>
    <link href="/2021/02/10/Hexo/Hexo%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/02/10/Hexo/Hexo%20%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h1><p>官方文档：<a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br>hexo init [folder]<br><span class="hljs-built_in">cd</span> [folder]<br>npm install<br><span class="hljs-comment"># 生成文档</span><br>hexo g<br><span class="hljs-comment"># 启动服务</span><br>hexo s<br></code></pre></td></tr></table></figure><p>访问：<a href="http://localhost:4000/">http://localhost:4000</a></p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 初始化</span><br>hexo init [folder]<br><span class="hljs-comment"># 生成</span><br>hexo g|generate<br><span class="hljs-comment"># 启动服务</span><br>hexo s|server<br><span class="hljs-comment"># 发布</span><br>hexo d|deploy<br><span class="hljs-comment"># 清除</span><br>hexo clean<br></code></pre></td></tr></table></figure><h2 id="基本设置"><a href="#基本设置" class="headerlink" title="基本设置"></a>基本设置</h2><p>配置文件为 <code>_config.yml</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 博客标题</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">&quot;SharonLee&#x27;s Blog&quot;</span><br><span class="hljs-comment"># 副标题</span><br><span class="hljs-attr">subtitle:</span> <br><span class="hljs-comment">#网站描述</span><br><span class="hljs-attr">description:</span> <br><span class="hljs-comment">#作者昵称</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">SharonLee</span><br><span class="hljs-comment"># 设置语言</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-comment"># 时区</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">Asia/Shanghai</span><br><br><span class="hljs-comment"># 设置主题</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br></code></pre></td></tr></table></figure><h2 id="发布到-Git"><a href="#发布到-Git" class="headerlink" title="发布到 Git"></a>发布到 Git</h2><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">&lt;repository</span> <span class="hljs-string">url&gt;</span><br>  <span class="hljs-attr">branch:</span> [<span class="hljs-string">branch</span>]<br></code></pre></td></tr></table></figure><h2 id="NexT-主题"><a href="#NexT-主题" class="headerlink" title="NexT 主题"></a>NexT 主题</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>github 地址：<a href="https://github.com/theme-next/hexo-theme-next">https://github.com/theme-next/hexo-theme-next</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next <span class="hljs-comment"># 删除 .git 文件夹</span><br><span class="hljs-comment"># 或者下载解压到相应目录</span><br></code></pre></td></tr></table></figure><p><code>_config.yml</code> 中配置主题</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">theme:</span> <span class="hljs-string">next</span><br></code></pre></td></tr></table></figure><h3 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h3><p><code>next/_config.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 字体小一点</span><br><span class="hljs-attr">font:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">global:</span><br>  <span class="hljs-attr">size:</span> <span class="hljs-number">0.8</span><br>  <br><span class="hljs-comment"># 样式</span><br><span class="hljs-attr">scheme:</span> <span class="hljs-string">Gemini</span><br><br><span class="hljs-comment"># 展开所有目录</span><br><span class="hljs-attr">toc:</span><br>  <span class="hljs-attr">expand_all:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="开启分类、标签和关于"><a href="#开启分类、标签和关于" class="headerlink" title="开启分类、标签和关于"></a>开启分类、标签和关于</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo new page tags<br>hexo new page categories<br>hexo new page about<br></code></pre></td></tr></table></figure><p><code>source/xxx/index.md</code> 中分别添加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">type:</span> <span class="hljs-string">tags</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">categories</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">about</span><br></code></pre></td></tr></table></figure><p>配置 <code>next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">about:</span> <span class="hljs-string">/about/</span> <span class="hljs-string">||</span> <span class="hljs-string">user</span><br>  <span class="hljs-attr">tags:</span> <span class="hljs-string">/tags/</span> <span class="hljs-string">||</span> <span class="hljs-string">tags</span><br>  <span class="hljs-attr">categories:</span> <span class="hljs-string">/categories/</span> <span class="hljs-string">||</span> <span class="hljs-string">th</span><br></code></pre></td></tr></table></figure><h3 id="开启搜索"><a href="#开启搜索" class="headerlink" title="开启搜索"></a>开启搜索</h3><p>安装依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-generator-searchdb --save<br></code></pre></td></tr></table></figure><p>配置 <code>next/_config.yml</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">local_search:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="文章头"><a href="#文章头" class="headerlink" title="文章头"></a>文章头</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tag:</span> <span class="hljs-string">标签</span><br><span class="hljs-attr">category:</span> <span class="hljs-string">分类</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">描述</span> <span class="hljs-comment"># 有描述则首页显示描述，否则显示全部，或者显示到 &lt;!-- more --&gt;</span><br></code></pre></td></tr></table></figure><h2 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-excerpt --save<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">excerpt:</span><br>  <span class="hljs-attr">depth:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">excerpt_excludes:</span> []<br>  <span class="hljs-attr">more_excludes:</span> []<br>  <span class="hljs-attr">hideWholePostExcerpts:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="GitHub-Actions-发布"><a href="#GitHub-Actions-发布" class="headerlink" title="GitHub Actions 发布"></a>GitHub Actions 发布</h2><p><code>.github/workflows/main.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-comment"># 触发条件：在 push 到 master 分支后</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">master</span><br><br><span class="hljs-comment"># 任务</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build-and-deploy:</span><br>    <span class="hljs-comment"># 服务器环境：最新版 Ubuntu</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-comment"># 拉取代码</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2.3.1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">persist-credentials:</span> <span class="hljs-literal">false</span><br><br>      <span class="hljs-comment"># 1、生成静态文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span><br><br>      <span class="hljs-comment"># 2、部署到 GitHub Pages</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">JamesIves/github-pages-deploy-action@4.0.0</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>          <span class="hljs-attr">folder:</span> <span class="hljs-string">public</span><br>          <span class="hljs-comment">#注意这里的 public 是仓库根目录下的 public，也就是 npm run build 生成静态资源的路径，比如有的人是 `docs/.vuepress/dist`</span><br><br>      <span class="hljs-comment"># 3、同步到 gitee 的仓库</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Sync</span> <span class="hljs-string">to</span> <span class="hljs-string">Gitee</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">wearerequired/git-mirror-action@v1</span><br>        <span class="hljs-attr">env:</span><br>          <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_RSA_PRIVATE_KEY</span><br>          <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_RSA_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># 注意替换为你的 GitHub 源仓库地址</span><br>          <span class="hljs-attr">source-repo:</span> <span class="hljs-string">git@github.com:linception/linception.github.io.git</span><br>          <span class="hljs-comment"># 注意替换为你的 Gitee 目标仓库地址</span><br>          <span class="hljs-attr">destination-repo:</span> <span class="hljs-string">git@gitee.com:sharonlee/sharonlee.git</span><br><br>      <span class="hljs-comment"># 4、部署到 Gitee Pages</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">Gitee</span> <span class="hljs-string">Pages</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">yanglbme/gitee-pages-action@main</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-comment"># 注意替换为你的 Gitee 用户名</span><br>          <span class="hljs-attr">gitee-username:</span> <span class="hljs-string">sharonlee</span><br>          <span class="hljs-comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span><br>          <span class="hljs-attr">gitee-password:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.GITEE_PASSWORD</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-comment"># 注意替换为你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span><br>          <span class="hljs-attr">gitee-repo:</span> <span class="hljs-string">sharonlee/sharonlee</span><br>          <span class="hljs-comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3><p>图片全放在 <code>source/images</code> 下，以绝对路径方式引用 <code>/images/xxx.png</code>，同时 typora <code>格式-&gt;图像-&gt;设置图片根目录</code> 设置为 <code>source</code> 目录</p><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3><p>设置 <code>post_asset_folder: true</code>，图片存放在 <code>filename</code> 文件夹下，这样图片会被拷贝到文件同级目录</p><p>再安装下面插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-asset-link --save<br></code></pre></td></tr></table></figure><p>最简单是用预装的 <code>hexo-renderer-marked</code> 插件，直接配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">marked:</span><br>  <span class="hljs-attr">prependRoot:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">postAsset:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> image_name.jpg This is an image %&#125;</span><br></code></pre></td></tr></table></figure><blockquote><p>不爽的地方：</p><ol><li>必须建立一个与文件名同名的文件夹存放资源，<code>post_asset_folder</code> 设置才会拷贝</li><li>文件名不能有空格，不过 title 可以有，并且可以不和文件名一致</li></ol></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p></li><li><p><a href="https://hexo.io/zh-cn/docs/asset-folders.html">资源文件夹</a></p></li><li><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93644533">Hexo博客NexT主题下添加分类、标签、关于菜单项</a></p></li><li><p><a href="https://jishuin.proginn.com/p/763bfbd38928">GitHub Actions入门教程：自动化部署静态博客</a></p></li><li><p><a href="https://cloud.tencent.com/developer/article/1702112">hexo 图片显示问题及使用typora设置图片路径</a></p></li></ul><link rel="stylesheet" href="/css/markmap.css" type="text/css">]]></content>
    
    
    <categories>
      
      <category>其他</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
